// server.js

// --- 1. Configura√ß√£o Inicial ---
require('dotenv').config();
const express = require('express');
const twilio = require('twilio');
const { GoogleGenerativeAI } = require('@google/generative-ai');

// --- 2. Inicializa√ß√£o dos Servi√ßos ---
const app = express();
app.use(express.urlencoded({ extended: false }));

// Inicializa o cliente da Twilio com as credenciais do ambiente
const twilioClient = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

// Inicializa o cliente do Gemini com a chave de API do ambiente
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// --- 3. Mem√≥ria da Conversa ---
// Objeto para armazenar as conversas ativas, usando o n√∫mero do cliente como chave.
// Isso garante que o bot lembre do hist√≥rico de cada pessoa.
const CONVERSAS_ATIVAS = {};

// --- 4. Webhook Principal (Onde a M√°gica Acontece) ---
app.post('/webhook', async (req, res) => {
    const mensagemRecebida = req.body.Body;
    const numeroCliente = req.body.From; // ex: 'whatsapp:+5511999998888'

    console.log(`\n---------------------------------`);
    console.log(`Mensagem recebida de ${numeroCliente}: "${mensagemRecebida}"`);

    // --- Gerenciamento do Hist√≥rico ---
    // Se for a primeira mensagem do cliente, cria um novo hist√≥rico.
    if (!CONVERSAS_ATIVAS[numeroCliente]) {
        CONVERSAS_ATIVAS[numeroCliente] = {
            historico: `Cliente: ${mensagemRecebida}\n`,
        };
        console.log(`Nova conversa iniciada para ${numeroCliente}.`);
    } else {
        // Se a conversa j√° existe, apenas adiciona a nova mensagem.
        CONVERSAS_ATIVAS[numeroCliente].historico += `Cliente: ${mensagemRecebida}\n`;
    }

    const historicoDaConversa = CONVERSAS_ATIVAS[numeroCliente].historico;

    // --- O Prompt Inteligente para o Gemini ---
    const prompt = `
        Voc√™ √© Helo√≠sa, uma consultora especialista da nossa construtora de alto padr√£o. Sua personalidade √© carism√°tica, atenciosa e muito humana. Voc√™ NUNCA soa como um rob√¥.

        Seu objetivo √© ter uma conversa amig√°vel e natural para conhecer o cliente e entender seus interesses. Conduza o di√°logo passo a passo, fazendo UMA PERGUNTA POR VEZ.

        **FLUXO DA CONVERSA IDEAL:**
        1. Comece se apresentando de forma calorosa e perguntando o nome do cliente.
        2. Depois de obter o nome, continue a conversa e pergunte o melhor email para contato.
        3. Em seguida, pergunte sobre qual de nossos empreendimentos ele tem interesse. Sugira algumas op√ß√µes como "Residencial Vista do Vale" ou "Torres do Atl√¢ntico" para facilitar.
        4. Quando tiver todas as informa√ß√µes (nome, email, interesse), agrade√ßa de forma personalizada e diga que um especialista entrar√° em contato em breve com todos os detalhes.

        **REGRAS IMPORTANTES:**
        - Mantenha as respostas curtas e conversacionais. Use emojis sutis (üòä, üëã) quando parecer natural.
        - NUNCA forne√ßa pre√ßos, condi√ß√µes de pagamento ou detalhes t√©cnicos. Sua fun√ß√£o √© apenas o primeiro contato.
        - Adapte-se ao que o cliente diz. Se ele fizer uma pergunta, responda antes de continuar o fluxo.

        **HIST√ìRICO DA CONVERSA ATUAL:**
        ${historicoDaConversa}

        **Sua Resposta (curta e amig√°vel):**
    `;

    try {
        // --- Gera√ß√£o da Resposta com IA ---
        const result = await model.generateContent(prompt);
        const respostaBot = result.response.text();

        // Adiciona a resposta da Helo√≠sa ao hist√≥rico para a pr√≥xima intera√ß√£o
        CONVERSAS_ATIVAS[numeroCliente].historico += `Helo√≠sa: ${respostaBot}\n`;

        // --- Envio da Resposta via Twilio ---
        await twilioClient.messages.create({
            body: respostaBot,
            from: 'whatsapp:+14155238886', // Seu n√∫mero da Sandbox da Twilio
            to: numeroCliente
        });

        console.log(`Resposta enviada para ${numeroCliente}: "${respostaBot}"`);

        // --- Extra√ß√£o de Dados Reais ao Final da Conversa ---
        if (respostaBot.toLowerCase().includes("especialista entrar√° em contato")) {
            console.log("\n--- Conversa finalizada. Iniciando extra√ß√£o de dados... ---");

            // Prompt espec√≠fico para pedir ao Gemini que extraia os dados e retorne em JSON
            const promptExtracao = `
                Baseado no seguinte hist√≥rico de conversa, extraia o nome do cliente, o email e o empreendimento de interesse.
                Retorne a resposta APENAS em formato JSON.
                Se alguma informa√ß√£o n√£o for encontrada, use o valor null.

                Exemplo de formato de sa√≠da:
                {
                  "nome": "Fulano de Tal",
                  "email": "fulano@email.com",
                  "interesse": "Residencial Vista do Vale"
                }

                HIST√ìRICO DA CONVERSA:
                ---
                ${CONVERSAS_ATIVAS[numeroCliente].historico}
                ---
            `;

            const extracaoResult = await model.generateContent(promptExtracao);
            const textoExtraido = extracaoResult.response.text();

            let dadosColetados;
            try {
                // Tenta interpretar a resposta JSON do Gemini.
                dadosColetados = JSON.parse(textoExtraido);
                console.log("Dados extra√≠dos com sucesso:", dadosColetados);
            } catch (e) {
                console.error("Falha ao interpretar JSON da extra√ß√£o. Usando dados de fallback.", e);
                // Fallback caso a extra√ß√£o falhe, para a demo n√£o quebrar.
                dadosColetados = {
                    nome: "N√£o foi poss√≠vel extrair",
                    email: "N√£o foi poss√≠vel extrair",
                    interesse: "N√£o foi poss√≠vel extrair",
                };
            }

            const dadosFinais = {
                nome: dadosColetados.nome,
                email: dadosColetados.email,
                interesse: dadosColetados.interesse,
                telefone: numeroCliente,
                historicoCompleto: CONVERSAS_ATIVAS[numeroCliente].historico
            };

            console.log("\n--- LEAD QUALIFICADO! ---");
            console.log("Dados prontos para enviar para o CRM:");
            console.log(JSON.stringify(dadosFinais, null, 2));
            console.log("-------------------------\n");
            
            // Limpa a conversa para que o mesmo n√∫mero possa come√ßar de novo depois.
            delete CONVERSAS_ATIVAS[numeroCliente];
        }

        // Responde √† Twilio que tudo ocorreu bem.
        res.status(200).send();

    } catch (error) {
        console.error("Erro ao chamar a API do Gemini ou Twilio:", error);
        res.status(500).send();
    }
});

// --- 5. Inicializa√ß√£o do Servidor ---
// Usa a porta fornecida pelo Render ou a 3000 como padr√£o.
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Servidor de demonstra√ß√£o rodando na porta ${PORT}. Aguardando conex√µes...`);
});
