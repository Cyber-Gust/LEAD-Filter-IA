// Objeto para armazenar as conversas em andamento
const CONVERSAS_ATIVAS = {};

app.post('/webhook', async (req, res) => {
    const mensagemRecebida = req.body.Body;
    const numeroCliente = req.body.From;

    console.log(`Mensagem recebida de ${numeroCliente}: "${mensagemRecebida}"`);

    // --- Gerenciamento do Hist√≥rico da Conversa ---
    if (!CONVERSAS_ATIVAS[numeroCliente]) {
        // Inicia uma nova conversa se for o primeiro contato
        CONVERSAS_ATIVAS[numeroCliente] = {
            historico: `Cliente: ${mensagemRecebida}\n`,
            dadosColetados: {
                nome: null,
                email: null,
                interesse: null
            }
        };
    } else {
        // Adiciona a nova mensagem ao hist√≥rico existente
        CONVERSAS_ATIVAS[numeroCliente].historico += `Cliente: ${mensagemRecebida}\n`;
    }

    const historicoDaConversa = CONVERSAS_ATIVAS[numeroCliente].historico;

    // --- O Novo Prompt Din√¢mico ---
    const prompt = `
        Voc√™ √© Helo√≠sa, uma consultora especialista da nossa construtora de alto padr√£o. Sua personalidade √© carism√°tica, atenciosa e muito humana. Voc√™ NUNCA soa como um rob√¥.

        Seu objetivo √© ter uma conversa amig√°vel e natural para conhecer o cliente e entender seus interesses. Conduza o di√°logo passo a passo, fazendo UMA PERGUNTA POR VEZ.

        **FLUXO DA CONVERSA IDEAL:**
        1. Comece se apresentando de forma calorosa e perguntando o nome do cliente.
        2. Depois de obter o nome, continue a conversa e pergunte o melhor email para contato.
        3. Em seguida, pergunte sobre qual de nossos empreendimentos ele tem interesse. Sugira algumas op√ß√µes como "Residencial Vista do Vale" ou "Torres do Atl√¢ntico" para facilitar.
        4. Quando tiver todas as informa√ß√µes (nome, email, interesse), agrade√ßa de forma personalizada e diga que um especialista entrar√° em contato em breve com todos os detalhes.

        **REGRAS IMPORTANTES:**
        - Mantenha as respostas curtas, amig√°veis e conversacionais. Use emojis sutis (üòä, üëã) quando parecer natural.
        - NUNCA forne√ßa pre√ßos, condi√ß√µes de pagamento ou detalhes t√©cnicos. Sua fun√ß√£o √© apenas o primeiro contato.
        - Adapte-se ao que o cliente diz. Se ele fizer uma pergunta, responda antes de continuar o fluxo.

        **HIST√ìRICO DA CONVERSA ATUAL:**
        ${historicoDaConversa}

        **Sua Resposta (curta e amig√°vel):**
    `;

    try {
        const result = await model.generateContent(prompt);
        const respostaBot = result.response.text();

        // Adiciona a resposta do bot ao hist√≥rico para a pr√≥xima intera√ß√£o
        CONVERSAS_ATIVAS[numeroCliente].historico += `Helo√≠sa: ${respostaBot}\n`;

        // Envia a resposta de volta para o cliente via Twilio
        await twilioClient.messages.create({
            body: respostaBot,
            from: 'whatsapp:+14155238886', // N√∫mero da Sandbox da Twilio
            to: numeroCliente
        });

        console.log(`Resposta enviada para ${numeroCliente}: "${respostaBot}"`);

        // --- "M√°gica" para a Demo (um pouco mais inteligente) ---
        // Vamos apenas simular a extra√ß√£o para o log, a l√≥gica real seria mais complexa
        if (respostaBot.toLowerCase().includes("especialista entrar√° em contato")) {
            const dadosFinais = {
                nome: "Extra√≠do da Conversa (Simulado)",
                email: "extraido@email.com (Simulado)",
                interesse: "Torres do Atl√¢ntico (Simulado)",
                telefone: numeroCliente,
                historicoCompleto: CONVERSAS_ATIVAS[numeroCliente].historico
            };
            console.log("\n--- LEAD QUALIFICADO! ---");
            console.log("Dados prontos para enviar para o CRM:");
            console.log(JSON.stringify(dadosFinais, null, 2));
            console.log("-------------------------\n");
            
            // Limpa a conversa para um novo contato futuro
            delete CONVERSAS_ATIVAS[numeroCliente];
        }

        res.status(200).send();

    } catch (error) {
        console.error("Erro ao chamar a API do Gemini ou Twilio:", error);
        res.status(500).send();
    }
});